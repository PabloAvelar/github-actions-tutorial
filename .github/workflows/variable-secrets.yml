name: Explorando variables y secretos

on:
  push
  # workflow_dispatch

######## Job usando variables de entorno en NIVEL DE WORKFLOW #########
env: # <------------- Variables a nivel JOBS
    CONTAINER_REGISTRY: docker.io
    IMAGE_NAME: github-actions-josejose

jobs:
    docker:
        runs-on: ubuntu-latest
        steps:
            - name: Docker Build
              run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest 

            - name: Docker Login
              # USANDO SECRETS DESDE GITHUB!!!!
              run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

            - name: Docker Publish
              run: echo docker push docker.io/${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest 

    deploy:
        if: github.ref == 'refs/heads/main'
        needs: docker
        concurrency:
          group: production-deployment
          cancel-in-progress: false
        runs-on: ubuntu-latest
        steps:
            - name: Docker run
              timeout-minutes: 1  # terminates the process after 1 minute
              run: |
                echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
                sleep 4s

######## Job sin usar variables de entorno #######
# jobs:
#     docker:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker Build
#               run: docker build -t docker.io/dockerUsername/imageName:latest 

#             - name: Docker Login
#               run: docker login --username=dockerUsername --password=1234567890

#             - name: Docker Publish
#               run: docker push docker.io/dockerUsername/imageName:latest 

#     deploy:
#         needs: docker
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker run
#               run: docker run


######## Job usando variables de entorno en NIVEL DE STEPS #########
# jobs:
#     docker:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker Build
#               env: # <------------- Variables a nivel STEP
#                 CONTAINER_REGISTRY: docker.io
#                 DOCKER_USERNAME: josejose
#                 IMAGE_NAME: github-actions-josejose

#               run: docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest 

#             - name: Docker Login
#               env: # <------------- Variables a nivel STEP
#                 DOCKER_PASSWORD: 1234567890
#                 DOCKER_USERNAME: josejose
#               run: docker login --username=${{ env.DOCKER_USERNAME }} --password=${{ env.DOCKER_PASSWORD }}

#             - name: Docker Publish
#               run: docker push docker.io/dockerUsername/imageName:latest 

#     deploy:
#         needs: docker
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker run
#               env: # <------------- Variables a nivel STEP
#                 CONTAINER_REGISTRY: docker.io
#                 DOCKER_USERNAME: josejose
#                 IMAGE_NAME: github-actions-josejose
#               run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_IMAGE/$IMAGE_NAME:latest

######## Job usando variables de entorno en NIVEL DE JOBS #########
# jobs:
#     docker:
#         env: # <------------- Variables a nivel JOBS
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: josejose
#             IMAGE_NAME: github-actions-josejose

#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker Build
#               run: docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest 

#             - name: Docker Login
#               env: # <------------- Variables a nivel STEP
#                 DOCKER_PASSWORD: 1234567890
#                 DOCKER_USERNAME: josejose
#               run: docker login --username=${{ env.DOCKER_USERNAME }} --password=${{ env.DOCKER_PASSWORD }}

#             - name: Docker Publish
#               run: docker push docker.io/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest 

#     deploy:
#         env: # <------------- Variables a nivel JOBS
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: josejose
#             IMAGE_NAME: github-actions-josejose
#         needs: docker
#         runs-on: ubuntu-latest
#         steps:
#             - name: Docker run
#               run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_IMAGE/$IMAGE_NAME:latest
